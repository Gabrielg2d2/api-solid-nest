#!/usr/bin/env sh

commit_msg_file=$1
commit_source=$2

# Get the staged files
staged_files=$(git diff --cached --name-only)

# Initialize variables for commit type detection
commit_type=""
commit_scope=""
commit_description=""

# Detect commit type based on staged files
if echo "$staged_files" | grep -q "^test"; then
  commit_type="test"
elif echo "$staged_files" | grep -q "^docs"; then
  commit_type="docs"
elif echo "$staged_files" | grep -q "^src"; then
  if git diff --cached -U0 | grep -q "^+.*fix|^+.*bug|^+.*error"; then
    commit_type="fix"
  else
    commit_type="feat"
  fi
elif echo "$staged_files" | grep -q "package\.json"; then
  commit_type="chore"
else
  commit_type="chore"
fi

# Get the main changed component for scope
if [ -n "$staged_files" ]; then
  main_file=$(echo "$staged_files" | head -n 1)
  commit_scope=$(echo "$main_file" | cut -d'/' -f1)
fi

# Generate a basic description
if [ -n "$staged_files" ]; then
  changed_files_count=$(echo "$staged_files" | wc -l)
  if [ $changed_files_count -eq 1 ]; then
    commit_description="update $(basename "$main_file")"
  else
    commit_description="update multiple files (${changed_files_count} files)"
  fi
fi

# Only modify the commit message if it's not from merge, squash, or commit -m
if [ -z "$commit_source" ] || [ "$commit_source" = "message" ]; then
  # Format the commit message
  if [ -n "$commit_scope" ]; then
    echo "${commit_type}(${commit_scope}): ${commit_description}" > "$commit_msg_file"
  else
    echo "${commit_type}: ${commit_description}" > "$commit_msg_file"
  fi
fi